# -*- coding: utf-8 -*-
"""Car_Price_Estimator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15FwYV75oO4dFEeQa0vZEmuXXtG1YyXyk
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import pickle
from sklearn.ensemble import ExtraTreesRegressor, RandomForestRegressor
from sklearn.model_selection import RandomizedSearchCV

"""#Data set from Car Dekho
https://www.kaggle.com/nehalbirla/vehicle-dataset-from-cardekho?select=car+data.csv
"""

df=pd.read_csv('car data.csv')
df.shape

print(df['Seller_Type'].unique(), df['Fuel_Type'].unique(), df['Transmission'].unique(), df['Owner'].unique())

df.describe()

df.columns

final_dataset=df[['Year','Selling_Price','Present_Price','Kms_Driven','Fuel_Type','Seller_Type','Transmission','Owner']]

"""#Enter a New Column for Age of Car & remove year column
####calculated by current year - year when car was purchased
"""

Current_Year = 2020
final_dataset['Age_of_Car']=Current_Year-final_dataset['Year']
final_dataset.head()

final_dataset.drop(['Year'],axis=1,inplace=True)

final_dataset.head()

final_dataset=pd.get_dummies(final_dataset,drop_first=True)

final_dataset.head()

final_dataset.corr()

"""#Corelation b/w the features"""

corrmat = df.corr()
top_corr_features = corrmat.index
plt.figure(figsize=(12,12))
#Heat map
g=sns.heatmap(df[top_corr_features].corr(),annot=True,cmap="magma")

"""#Final DataSet
###X: independent, y: dependent feature
"""

X=final_dataset.iloc[:,1:]
y=final_dataset.iloc[:,0]
X['Owner'].unique()

X.head()

y.head()

"""#Finding Important Feature | Model Training"""

model = ExtraTreesRegressor()
model.fit(X,y)

feat_importances = pd.Series(model.feature_importances_, index=X.columns)
feat_importances.nlargest(5).plot(kind='barh')
plt.show()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

X_train.shape

rf_random=RandomForestRegressor()

"""#Hyper Parameter Tuning | Randomized Search CV"""

n_estimators = [int(x) for x in np.linspace(start = 0, stop = 1000, num = 21)]    # Number of trees
max_features = ['auto', 'sqrt']                                                     # Number of features to consider at every split
max_depth = [int(x) for x in np.linspace(5, 30, num = 6)]                           # Maximum levels in tree
min_samples_split = [2, 5, 10, 15, 100]                                             # Minimum number of samples required to split a node
min_samples_leaf = [1, 2, 5, 10]                                                    # Minimum number of samples required at each leaf node

# Create the random grid
random_grid = {'n_estimators': n_estimators,
               'max_features': max_features,
               'max_depth': max_depth,
               'min_samples_split': min_samples_split,
               'min_samples_leaf': min_samples_leaf}

print(random_grid)

"""###Best Hyperparameters Searching"""

rf = RandomForestRegressor()

# Random search of parameters, using 5 fold cross validation, 
# search across 50 different combinations
rf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid,scoring='neg_mean_squared_error', n_iter = 10, cv = 5, verbose=2, random_state=42, n_jobs = 1)

rf_random.fit(X_train,y_train)

rf_random.best_params_

rf_random.best_score_

predictions=rf_random.predict(X_test)

sns.distplot(y_test-predictions)

"""#Model Saving"""

# open a file, where you ant to store the data
file = open('random_forest_regression_model.pkl', 'wb')

# dump information to that file
pickle.dump(rf_random, file)

"""#Car Price Estimator
###Run below code and enter asked values
"""

model = pickle.load(open('random_forest_regression_model.pkl', 'rb'))

Year = input('Enter year when car was purchased:  ')
Year=2020-int(Year)
print('Age of your Car:  ', Year, 'Years')

Present_Price = input('Show Room Price (In Lakh Rs):  ')

Kms_Driven = input('How many KM drived:  ')
Kms_Driven2=np.log(int(Kms_Driven))

Owner = input('How many owners owned the car before:  ')

Fuel_Type_Petrol = input('Enter Fuel type(Petrol(P)/Diesel(D)/CNG(C)):  ').lower()
if (Fuel_Type_Petrol=='p'):
    Fuel_Type_Petrol=1
    Fuel_Type_Diesel=0
else:
    Fuel_Type_Petrol=0
    Fuel_Type_Diesel=1

Seller_Type_Individual=input('Are you a Dealer(D) or Individual(I):  ').lower()
if(Seller_Type_Individual=='i'):
    Seller_Type_Individual=1
else:
    Seller_Type_Individual=0	

Transmission_Mannual=input('Transmission type Manual(M)/Automatic(A)').lower()
if(Transmission_Mannual=='manual'):
    Transmission_Mannual=1
else:
    Transmission_Mannual=0


prediction=model.predict([[Present_Price,Kms_Driven2,Owner,Year,Fuel_Type_Diesel,Fuel_Type_Petrol,Seller_Type_Individual,Transmission_Mannual]])
output=round(prediction[0],2)
# print(output)
if output<0:
    print("Sorry you cannot sell this car")
else:
    print("You Can Sell The Car at ", output, 'Lakh Rs')

